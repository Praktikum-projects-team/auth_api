"""add partitioning users table

Revision ID: 09d2fee94168
Revises: 24ec1405a840
Create Date: 2023-06-06 00:50:50.725425

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '09d2fee94168'
down_revision = '24ec1405a840'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('login_history', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    # Add partition_id column to users table
    op.add_column('users', sa.Column('partition_id', sa.Integer(), nullable=False))

    # Create user_partitions table
    op.create_table('user_partitions',
                    sa.Column('partition_id', sa.Integer(), nullable=False),
                    sa.Column('table_name', sa.String(length=255), nullable=False),
                    sa.PrimaryKeyConstraint('partition_id')
                    )

    # Create trigger to insert into user_partitions table
    op.execute("""
    CREATE OR REPLACE FUNCTION insert_user_partition()
    RETURNS TRIGGER AS $$
    BEGIN
    INSERT INTO user_partitions (partition_id, table_name)
    VALUES (NEW.partition_id, 'users_' || NEW.partition_id);
    RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """)

    op.execute("""
    CREATE TRIGGER insert_user_partition_trigger
    AFTER INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION insert_user_partition();
    """)

    # Modify users table to use partitioning
    op.execute("""
    CREATE TABLE users_partitions (
    CHECK (partition_id >= 0 AND partition_id < 16)
    ) INHERITS (users);
    """)

    op.execute("""
    CREATE OR REPLACE FUNCTION users_insert_trigger()
    RETURNS TRIGGER AS $$
    BEGIN
    INSERT INTO users_partitions VALUES (NEW.*);
    RETURN NULL;
    END;
    $$ LANGUAGE plpgsql;
    """)

    op.execute("""
    CREATE TRIGGER users_insert_trigger
    BEFORE INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION users_insert_trigger();
    """)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('login_history', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    # Remove partitioning from users table
    op.execute("""
    DROP TRIGGER users_insert_trigger ON users;
    DROP FUNCTION users_insert_trigger();
    DROP TABLE users_partitions;
    """)

    # Remove trigger and function for user_partitions table
    op.execute("""
    DROP TRIGGER insert_user_partition_trigger ON users;
    DROP FUNCTION insert_user_partition();
    """)

    # Remove user_partitions table and partition_id column from users table
    op.drop_table('user_partitions')
    op.drop_column('users', 'partition_id')

    # ### end Alembic commands ###
