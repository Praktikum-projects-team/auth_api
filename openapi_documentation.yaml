openapi: 3.0.0
info:
  version: 1.0.0
  title: AUTH Service
  description: authentication and authorization service for online cinema.

tags:
- name: Auth
  description: authentication and authorization
- name: Users
  description: manage user's private information by user
- name: Admin users
  description: manage users' service information by admin(admins only)
- name: Admin roles
  description: manage roles(admins only)

paths:
  /auth/sign_up:
    post:
      summary: Create new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      description: Create new User with password and email
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'


  /auth/login:
    post:
      summary: Authorize user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      description: User authorization, returns jwt token pair to use API methods.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'


  /auth/refresh:
    post:
      summary: Get new tokens
      tags:
        - Auth
      security:
        - bearerAuth: []
      description: Get new token pair by active refresh token sent in header
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/logout:
    post:
      summary: Log out User
      tags:
        - Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Token'
                - required:
                    - refresh_token
      description: Log out and invalidate JWT tokens
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'


  /admin/roles:
    get:
      summary: list all roles
      tags:
        - Admin roles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create new role
      tags:
        - Admin roles
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRole'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/roles/{role_id}:
    parameters:
      - in: path
        name: 'role_id'
        required: true
        schema:
          type: string

    put:
      summary: Update an existing role
      tags:
        - Admin roles
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRole'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      summary: Delete an existing role
      tags:
        - Admin roles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'


  /admin/users:
    get:
      summary: List all users
      tags:
        - Admin users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAdminInfoOut'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
          
  /admin/users/{user_id}:
    parameters:
      - in: path
        name: 'user_id'
        required: true
        schema:
          type: string

    get:
      summary: Get information for a specific user
      tags:
        - Admin users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdminInfoOut'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'


    put:
      summary: Update service information about user
      tags:
        - Admin users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAdminInfoIn'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'


  /user/profile:
    get:
      summary: get curren user's personal info
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: change curren user's personal info
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrentUser'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
          

  /user/profile/change_login:
    put:
      summary: change curren user's login
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeLogin'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
          
  /user/profile/change_password:
    put:
      summary: change curren user's password
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

    
  /user/login_history:
    get:
      summary: Get current user authorization history
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthHistory'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        login:
          type: string
        password:
          type: string

    CreateUser:
      type: object
      properties:
        name:
          type: string
        login:
          type: string
        password:
          type: string

    UserAdminInfoIn:
      type: object
      properties:
          is_superuser:
            type: boolean
            default:
          roles:
            type: string

    UserAdminInfoOut:
      type: object
      properties:
          id:
            type: string
          is_superuser:
            type: boolean
            default:
          roles:
            type: string
          name:
            type: string
          created_at:
            type: string
          login:
            type: string

    CurrentUser:
      type: object
      properties:
        name:
          type: string

    ChangeLogin:
      type: object
      properties:
        new_login:
          type: string

    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
        new_password:
          type: string

    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - error_code
        - message

    Token:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string

    AuthHistory:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user_id:
          type: string
          readOnly: true
        auth_datetime:
          type: integer
        user_agent:
          type: string

    Role:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string

    CreateRole:
      type: object
      properties:
        name:
          type: string

  responses:

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal Server Error
